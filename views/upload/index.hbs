<script language="JavaScript" type="text/javascript">
   var PRODUCT_ID = '{{cattfish_product_id}}';

   var accessToken = null;
   var esdr = null;
   var cattfish = null;
   var map = null;
   var marker = null;
   var deviceId = null;
   var feeds = null;
   var selectedFeed = null;

   var isRequestingDeletion = false;
   var deleteDataTimeoutHandle = null;

   var messageEventHandlers = {
      'device-data-response' : function(source, data) {
         if (data && data.device && data.data) {
            cattfish = data;
            prepareForUpload();
         }
         else {
            showPanel('no_data_available_panel')
         }
      },

      'erase-device-response' : handleEraseDeviceResponse
   };

   window.addEventListener("message",
                           function(event) {
                              // handle the event
                              if (event.data && event.data.eventType) {
                                 var eventHandler = messageEventHandlers[event.data.eventType];
                                 if (typeof eventHandler === 'function') {
                                    eventHandler(event.source, event.data.data);
                                 }
                                 else {
                                    console.log("Invalid event handler [" + event.data.eventType + "]");
                                 }
                              }
                              else {
                                 console.log("Unexpected event format");
                              }
                           },
                           false);

   function sendMessage(eventType, data) {
      window.top.postMessage({ eventType : eventType, data : data }, '*');
   }

   function sendDeleteRequest() {
      $("#deletion_status").text("Please wait...");
      showPanel('delete_data_panel');

      // first set a 1 second timer that will flag a failure. We need this for the case where a user ejects the CATTfish
      // before sending the deletion request.  In that case, the loadScript() call to read DELETE.JS will fail with an
      // (uncatchable) net::ERR_FILE_NOT_FOUND error.  Since we can't catch it, we just have to rely on timing. If 1
      // second elapses between when we make the request to erase the device and when this timeout triggers, then assume
      // that there was a failure and just call handleEraseDeviceResponse and give it null data.
      //
      // On the other hand, if the erase device request succeeds, then handleEraseDeviceResponse() will get called
      // before this timeout, and handleEraseDeviceResponse() will clear it, ensuring that only the successful call
      // to handleEraseDeviceResponse() will be executed.
      deleteDataTimeoutHandle = setTimeout(function() {
         isRequestingDeletion = false;
         handleEraseDeviceResponse(null, null);
      }, 1000);

      // tell the parent that I'm ready
      sendMessage('erase-device-request');

      return false;
   }

   function handleEraseDeviceResponse(source, data) {
      var deletionStatusElement = $("#deletion_status");

      // sendDeleteRequest() for details about this timeout
      if (deleteDataTimeoutHandle) {
         window.clearTimeout(deleteDataTimeoutHandle);
         deleteDataTimeoutHandle = null;
      }

      if (data && data['wasDeleteSuccessful']) {
         deletionStatusElement.text("OK, the CATTfish will delete its data after you eject it from your computer.");
      }
      else {
         deletionStatusElement.text("Sorry, an error occurred while communicating with your CATTfish device. Please try again later.");
      }
   }

   $(document).ready(function() {
      accessToken = new com.cattfish.AccessToken();

      // don't bother doing anything if I'm not being iframed
      if (window !== window.top) {
         // try fetching the access token
         accessToken.load(function(err, token) {
            console.log("Done getting the token: " + token);

            // tell the parent that I'm ready
            sendMessage('device-data-request');
         });
      }
   });

   function initializeMap() {
      var mapOptions = {
         center : { lat : 36.81435205714916, lng : -93.35445347656253 },
         zoom : 3,
         streetViewControl : false,
         overviewMapControl : false
      };
      map = new google.maps.Map(document.getElementById('map_canvas'), mapOptions);
      map.set("disableDoubleClickZoom", true);
      marker = new google.maps.Marker({
                                         position : map.getCenter(),
                                         map : map,
                                         draggable : true
                                      });

      google.maps.event.addListener(map, 'dblclick', function(e) {
         console.log(e.latLng.toString());
         marker.setPosition(e.latLng);
      });

      google.maps.event.addListener(marker,
                                    'dragend',
                                    function() {
                                       console.log("Marker at: " + marker.getPosition().toString());
                                    });

      // show the geolocation link, if supported
      if (isGeolocationSupported()) {
         $("#map_geolocation").show();
      }
   }

   function prepareForUpload() {
      if (cattfish) {
         if (accessToken.get() == null) {
            console.log("Need login info!");
            // prompt the user to log in first
            showLogInPanel();
         }
         else {
            esdr = new org.cmucreatelab.esdr.ESDR(accessToken.get());

            // start the upload process by checking whether this device is already registered
            getDevice(cattfish.device.serialNumber);
         }
      }
      else {
         // TODO: do something if device and data aren't defined.
         console.log("cattfish is not defined. ");
      }
   }

   function getDevice(serialNumber) {
      console.log("Checking whether device [" + serialNumber + "] is registered...");
      esdr.devices.findByProductAndSerialNumber(PRODUCT_ID,
                                                serialNumber,
                                                'id',
                                                {
                                                   success : function(foundDevice) {
                                                      console.log("found device: " + JSON.stringify(foundDevice, null, 3));
                                                      deviceId = foundDevice.id;
                                                      getFeeds();
                                                   },
                                                   unauthorized : function() {
                                                      // TODO: unauthorized--need to log in first and try again (this shouldn't happen, but...)
                                                   },
                                                   notFound : function() {
                                                      console.log("Unknown device, need to create it.");
                                                      createDevice(cattfish.device.serialNumber);
                                                   },
                                                   error : function(responseBody, httpStatusCode) {
                                                      // TODO: some unexpected error
                                                      console.log("Error: Unexpected error (HTTP status " + httpStatusCode + ") trying to get the device info from ESDR: " + JSON.stringify(responseBody, null, 3));
                                                   },
                                                   failure : function(err, httpStatusCode) {
                                                      // TODO: some unexpected error
                                                      console.log("Error: Unexpected failure (HTTP status " + httpStatusCode + ") trying to get the device info from ESDR: " + err);
                                                   }
                                                });
   }

   function createDevice(serialNumber) {
      // unknown device, need to register it
      console.log("Creating device [" + serialNumber + "]...");
      esdr.devices.create(PRODUCT_ID,
                          {
                             name : "CATTfish (" + serialNumber.slice(0, 8) + ")",
                             serialNumber : serialNumber
                          },
                          {
                             created : function(createdDevice) {
                                deviceId = createdDevice.id;
                                // TODO: created!
                                console.log("Device created: " + JSON.stringify(createdDevice, null, 3));
                                showChooseFeedPanel();
                             },
                             duplicate : function() {
                                // TODO: serial number already exists for this product and user
                                console.log("Error: serial number already exists for this product and user");
                             },
                             validationError : function(validationErrors) {
                                // TODO: invalid serial number
                                console.log("Error: invalid serial number: " + JSON.stringify(validationErrors, null, 3));
                             },
                             error : function(responseBody, httpStatusCode) {
                                // TODO: some other error
                                console.log("Error: Unexpected error (HTTP status " + httpStatusCode + ") while trying to create the device: " + JSON.stringify(responseBody, null, 3));
                             },
                             failure : function(err, httpStatusCode) {
                                // TODO: some other error
                                console.log("Error: Unexpected failure (HTTP status " + httpStatusCode + ") trying to create the device: " + err);
                             }
                          });
   }

   function selectFeed(feed) {
      var feedElement = $("#feed_list_item_" + feed.id);
      if (selectedFeed == null) {
         selectedFeed = feed;
         feedElement
               .addClass("selected_feed")
               .find(".checkmark_icon_container").show()
               .addClass("checkmark_white");
      }
      else {
         // deselect the existing feed
         $("#feed_list_item_" + selectedFeed.id)
               .removeClass("selected_feed")
               .find(".checkmark_icon_container").hide()
               .removeClass("checkmark_white");

         if (selectedFeed.id == feed.id) {
            selectedFeed = null;
         }
         else {
            selectedFeed = feed;
            feedElement
                  .addClass("selected_feed")
                  .find(".checkmark_icon_container").show()
                  .addClass("checkmark_white");
         }
      }
   }

   function getFeeds() {
      feeds = null;
      esdr.feeds.find("?where=deviceId=" + deviceId + "&orderBy=-lastUpload", // TODO: limit selected fields!
                      {
                         success : function(foundFeeds) {
                            feeds = foundFeeds.rows;
                            if (feeds.length > 0) {
                               var feedListItemTemplate = Handlebars.templates['feed_list_item'];
                               feeds.forEach(function(feed) {
                                  feed.lastUploadFormatted = (feed.minTimeSecs == null || feed.maxTimeSecs == null) ? "never" : new Date(feed.lastUpload).toLocaleDateString() + " at " + new Date(feed.lastUpload).toLocaleTimeString();
                                  var feedElement = $(feedListItemTemplate(feed));
                                  $("#existing_feeds").append(feedElement);
                                  feedElement.click(function() {
                                     selectFeed(feed);
                                  });
                               });
                            }
                            showChooseFeedPanel();
                         },
                         validationError : function(errors) {
                            // TODO
                            console.log("Validation error while trying to load feeds for device ID [" + deviceId + "]: " + JSON.stringify(errors, null, 3));
                         },
                         error : function(responseBody, httpStatusCode) {
                            // TODO: some other error
                            console.log("Error: Unexpected error (HTTP status " + httpStatusCode + ") while trying to load feeds for device ID [" + deviceId + "]: " + JSON.stringify(responseBody, null, 3));
                         },
                         failure : function(err, httpStatusCode) {
                            // TODO: some other error
                            console.log("Error: Unexpected failure (HTTP status " + httpStatusCode + ") while trying to load feeds for device ID [" + deviceId + "]: " + err);
                         }
                      });
   }

   function handleLoginSuccess(loginResult) {
      console.log("in handleLoginSuccess(): got access token: " + loginResult.accessToken);
      $(".upload_panel").hide();
      accessToken.set(loginResult.accessToken);
      prepareForUpload();
   }

   function handleLoginUnauthorized(messages) {
      messages.add('Login failed. Please double-check your login below and make sure you have ' +
                   'activated your account by clicking the link in the verification email we sent ' +
                   'when you signed up.');
   }

   function handleUploadToSelectedFeed() {
      if (selectedFeed) {
         uploadToFeed(selectedFeed);
      }
      else {
         $("#choose_feed_error_messages").show();
      }
      return false;
   }

   function uploadToFeed(targetFeed) {
      esdr.feeds.upload(targetFeed.apiKey,
                        {
                           channel_names : cattfish.data.fields,
                           data : cattfish.data.samples
                        },
                        {
                           success : function(uploadResult) {
                              // TODO
                              console.log("Upload successful: " + JSON.stringify(uploadResult, null, 3));
                              showUploadCompletePanel();
                           },
                           badRequest : function() {
                              // TODO
                              console.log("Bad request, no data!");
                           },
                           unauthorized : function() {
                              // TODO
                              console.log("Upload not authorized!");
                           },
                           forbidden : function() {
                              // TODO
                              console.log("Upload forbidden!");
                           },
                           entityTooLarge : function() {
                              // TODO
                              console.log("Upload failed because the entity is too large!");
                           },
                           validationError : function(validationErrors) {
                              // TODO
                              console.log("Upload failed due to validation errors!" + JSON.stringify(validationErrors, null, 3));
                           },
                           error : function(responseBody, httpStatusCode) {
                              // TODO
                              console.log("Error: Unexpected error (HTTP status " + httpStatusCode + ") while trying to upload to feed:" + JSON.stringify(responseBody, null, 3));
                           },
                           failure : function(err, httpStatusCode) {
                              // TODO: some other error
                              console.log("Error: Unexpected failure (HTTP status " + httpStatusCode + ") while trying to upload to feed: " + err);
                           }
                        });
   }

   function showSignUpPanel() {
      showPanel('signup_panel');
      $("#signup_email").focus();
   }

   function showLogInPanel() {
      showPanel('login_panel');
      $("#login_email").focus();
   }

   function showCreateFeedPanel() {
      $("#create_feed_panel").show();
      $("#choose_feed_form").hide();
      $(".choose_feed_panel_instructions").hide();

      // make sure the map is rendered correctly
      var center = map.getCenter();
      google.maps.event.trigger(map, "resize");
      map.setCenter(center);
      return false;
   }

   function showChooseFeedPanel() {
      $("#choose_feed_panel");

      initializeMap();

      // show the appropriate instructions
      var hasFeeds = (feeds && feeds.length > 0);
      var hasExactlyOneFeed = (feeds && feeds.length == 1);
      $(".choose_feed_panel_instructions").hide();
      $("#create_feed_panel").hide();
      $("#upload_link").hide();
      if (hasFeeds) {
         if (hasExactlyOneFeed) {
            $("#choose_feed_panel_instructions_one_feed").show();
            selectFeed(feeds[0]);
         }
         else {
            $("#choose_feed_panel_instructions_multiple_feeds").show();
         }
         $("#upload_link").show();
      }
      else {
         showCreateFeedPanel();
      }

      showPanel('choose_feed_panel');
   }

   function showUploadCompletePanel() {
      showPanel('upload_complete_panel');
   }

   function showPanel(panelElementId) {
      $(".upload_panel").hide();
      $("#" + panelElementId).show();
   }

   function doGeolocation() {
      if (isGeolocationSupported()) {
         $(".map_geolocation_prompt").hide();
         $("#map_geolocation_status_please_wait").show();
         var errorHandler = function() {
            $(".map_geolocation_prompt").hide();
            $("#map_geolocation_status_fail").show();
         };
         navigator.geolocation.getCurrentPosition(function(geoPosition) {
                                                     if (geoPosition && geoPosition.coords) {
                                                        $(".map_geolocation_prompt").hide();
                                                        $("#map_geolocation_link").show();
                                                        var userLocation = new google.maps.LatLng(geoPosition.coords.latitude, geoPosition.coords.longitude);
                                                        marker.setPosition(userLocation);
                                                        map.setZoom(17);
                                                        map.setCenter(userLocation);
                                                     }
                                                     else {
                                                        errorHandler();
                                                     }
                                                  },
                                                  errorHandler,
                                                  { timeout : 8000 });
      }
      return false;
   }

   function isGeolocationSupported() {
      return navigator['geolocation'] && navigator['geolocation']['getCurrentPosition'];
   }

</script>
<div class="main_container" style="margin-top:10px">
   <div id="upload_panel" class="content_container">
      <div class="page_title">
         CATTfish Data Upload
      </div>
   </div>

   <div id="login_panel" class="content_container upload_panel">
      <div class="page_instructions">You must be logged in to upload your data. Please log in using the form below.</div>
      <table border="0" cellpadding="0" cellspacing="0" width="100%">
         <tr valign="top">
            <td width="418">
               <form id="login_form" onsubmit="return submitLoginForm('login_form','login_email','login_password','login_messages',null,handleLoginSuccess,handleLoginUnauthorized);">
                  <div id="login_messages" class="form_messages form_error_messages"></div>
                  <div><input type="email" id="login_email" name="login_email" placeholder="Email address"/></div>
                  <div><input type="password" id="login_password" name="login_password" placeholder="Password"/></div>
                  <div>
                     <div style="float:right"><input class="submit_link" type="submit" value="Log In &raquo;"></div>
                  </div>
               </form>
            </td>
            <td width="20">&nbsp;</td>
            <td width="*" align="right">
               <div>Need an account? <a href="#" onclick="showSignUpPanel(); return false;">Sign up!</a></div>
            </td>
         </tr>
      </table>
   </div>
   <div id="signup_panel" class="content_container upload_panel">
      <div class="page_instructions">If you need an account, please submit the form below to sign up.</div>
      <table border="0" cellpadding="0" cellspacing="0" width="100%">
         <tr valign="top">
            <td width="418">
               <div id="signup_error_messages" class="form_messages form_error_messages"></div>
               <div id="signup_success_messages" class="form_messages form_success_messages"></div>
               <form id="signup_form" onsubmit="return submitSignUpForm('signup_form', 'signup_email', 'signup_password', 'signup_error_messages', 'signup_success_messages', 'Come back here once your account is active to log in and complete your upload.');">
                  <div><input type="email" id="signup_email" name="signup_email" placeholder="Email address"/></div>
                  <div><input type="password" id="signup_password" name="signup_password" placeholder="Password"/></div>
                  <div>
                     <div style="float:right"><input class="submit_link" type="submit" value="Sign Up &raquo;"></div>
                  </div>
               </form>
            </td>
            <td width="20">&nbsp;</td>
            <td width="*" align="right">
               <div>Have an account? <a href="#" onclick="showLogInPanel(); return false;">Log in!</a></div>
            </td>
         </tr>
      </table>
   </div>
   <div id="choose_feed_panel" class="content_container upload_panel">
      <div class="page_instructions">
         <div id="choose_feed_panel_instructions_multiple_feeds" class="choose_feed_panel_instructions" style="display:none">
            There are multiple installation location datasets associated with this CATTfish. Please select the one which
            should receive this upload. Or, if you have moved the CATTfish to a new location, you can
            <a href="#" onclick="return showCreateFeedPanel();">create a new installation location</a>.
         </div>
         <div id="choose_feed_panel_instructions_one_feed" class="choose_feed_panel_instructions" style="display:none">
            You have uploaded data from this CATTfish before. To upload the new data to the same installation location,
            simply click Upload below. Or, if you have moved the CATTfish to a new location, you can
            <a href="#" onclick="return showCreateFeedPanel();">create a new installation location</a>.
         </div>
      </div>
      <div id="choose_feed_error_messages" class="form_messages form_error_messages">
         Please select the installation location you want to receive this upload.
      </div>
      <form id="choose_feed_form" onsubmit="return handleUploadToSelectedFeed();">
         <div id="existing_feeds" class="feed_list"></div>
         <div id="upload_link">
            <div style="text-align:right;"><input class="submit_link" type="submit" value="Upload &raquo;"></div>
         </div>
      </form>
      <div id="create_feed_panel">
         <div class="page_instructions">
            Please provide details about where you have installed this CATTfish. You will need to provide a name for the
            location, specify the location on the map, and choose the visibility.
         </div>
         <div id="create_feed_error_messages" class="form_messages form_error_messages"></div>
         <form id="create_feed_form" onsubmit="return submitCreateFeedForm('create_feed_form',deviceId,'create_feed_location_name',{latitude:marker.getPosition().lat(),longitude:marker.getPosition().lng()},$('#create_feed_is_public_true').prop('checked'),'create_feed_error_messages', esdr, uploadToFeed)" style="width:418px">
            <div>
               <input type="text" id="create_feed_location_name" name="create_feed_location_name" placeholder="Location name (e.g. Upstairs bathroom)"/>
            </div>
            <div id="map_area">
               <div id="map_geolocation" style="display:none;">
                  <div id="map_geolocation_link" class="map_geolocation_prompt" style="display:block;">
                     <a href="#" onclick="return doGeolocation();">Place the marker at my current location</a>
                  </div>
                  <div id="map_geolocation_status_please_wait" class="map_geolocation_prompt">Determining your current location, please wait...</div>
                  <div id="map_geolocation_status_fail" class="map_geolocation_prompt">Sorry, your current location could not be determined.</div>
               </div>
               <div id="map_canvas"></div>
               <div class="map_instructions">Double-click the map or drag the marker to set the marker's location.</div>
            </div>
            <div style="margin-top:20px;">
               <div class="">The device name, location, and uploaded data will be:</div>
               <div>
                  <input type="radio" id="create_feed_is_public_false" name="create_feed_is_public" value="false" checked="checked">
                  <label for="create_feed_is_public_false">Private &mdash; visible only to me</label>
               </div>
               <div>
                  <input type="radio" id="create_feed_is_public_true" name="create_feed_is_public" value="true">
                  <label for="create_feed_is_public_true">Public &mdash; visible to all users</label>
               </div>
            </div>
            <div style="text-align:right"><input class="submit_link" type="submit" value="Upload &raquo;"></div>
         </form>
      </div>

   </div>
   <div id="upload_complete_panel" class="content_container upload_panel">
      <div class="page_instructions">
         <p>Success! Your data samples have finished uploading.</p>
         <p>
            Would you like to erase the data from your CATTfish? If you choose Yes, the CATTfish device will erase its
            data after you eject it from your computer. Data which you have uploaded to cattfish.com will not be affected.
         </p>
         <div style="float:right">
            <a href="/dashboard" target="_top">No, just view my data on cattfish.com</a>
         </div>
         <div>
            <a href="javascript:sendDeleteRequest();">Yes, erase the data from my CATTfish</a>
         </div>
      </div>
   </div>
   <div id="delete_data_panel" class="content_container upload_panel">
      <div class="page_instructions">
         <div id="deletion_status"></div>
         <div>
            <p><a href="/dashboard" target="_top">View my data on cattfish.com</a></p>
         </div>
      </div>
   </div>
   <div id="no_data_available_panel" class="content_container upload_panel">
      <div class="page_instructions">
         <p>Your CATTfish has no new data to upload.</p>
         <p>You can <a href="/dashboard" target="_top">view your previously-uploaded data</a>.</p>
      </div>
   </div>
</div>